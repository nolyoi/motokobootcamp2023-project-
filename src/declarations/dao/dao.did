type Tokens = nat;
type StaticProposal = 
 record {
   content: text;
   id: nat;
   proposer: principal;
   state: ProposalState;
   timestamp: int;
   title: text;
   voters: List;
   votes_no: Tokens;
   votes_yes: Tokens;
 };
type Result_2 = 
 variant {
   err: text;
   ok: vec StaticProposal;
 };
type Result_1 = 
 variant {
   err: text;
   ok: StaticProposal;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type ProposalState = 
 variant {
   accepted;
   failed: text;
   open;
   rejected;
 };
type List = 
 opt record {
       principal;
       List;
     };
service : {
  get_all_proposals: () -> (Result_2) query;
  get_mb_balance: (principal) -> (nat);
  get_proposal: (nat) -> (Result_1) query;
  submit_proposal: (text, text) -> (Result);
  vote: (nat, bool) -> (Result);
}
